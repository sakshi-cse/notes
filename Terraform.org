* Terraform

** Create VPC, EC2, and LoadBalancer

#+begin_src bash

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
 region = "us-east-1"
 access_key = "_"
 secret_key = "_"
}

# Create a VPC
resource "aws_vpc" "task-vpc" {
  cidr_block = "10.10.0.0/16"
  tags = {
        Name = "tf-task-vpc"
}
}

#creating public subnet
resource "aws_subnet" "public" {
  vpc_id     = aws_vpc.task-vpc.id
  cidr_block = "10.10.0.0/18"
  availability_zone = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "tf-task-pub-sn"
  }
}


#creating public subnet
resource "aws_subnet" "public2" {
  vpc_id     = aws_vpc.task-vpc.id
  cidr_block = "10.10.64.0/18"
  availability_zone = "us-east-1b"
  map_public_ip_on_launch = true

  tags = {
    Name = "tf-task-pub-sn2"
  }
}
#creating private subnet
resource "aws_subnet" "private" {
  vpc_id     = aws_vpc.task-vpc.id
  cidr_block = "10.10.128.0/18"
  map_public_ip_on_launch = false

  tags = {
    Name = "tf-task-prv-sn"
  }
}


#creating igw
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.task-vpc.id

  tags = {
    Name = "task-igw"
  }
}

#creating elastic ip
resource "aws_eip" "nat_eip" {
  vpc        = true
}

#creating nat gateway
resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.private.id

  tags = {
    Name        = "task-nat"
  }
}
#route table private
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.task-vpc.id

  tags = {
    Name        = "task-vpc-private-route-table"
  }
}

# Routing tables to route traffic for Public Subnet
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.task-vpc.id

  tags = {
    Name        = "task-vpc-public-route-table"
  }

}

# Routing tables to route traffic for Public Subnet
resource "aws_route_table" "public2" {
  vpc_id = aws_vpc.task-vpc.id

  tags = {
    Name        = "task-vpc-public-route-table2"
  }
}


# Route for Internet Gateway
resource "aws_route" "public_internet_gateway" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw.id
}

# Route for NAT
resource "aws_route" "private_nat_gateway" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat.id
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private.id
}

#security group for public instance
resource "aws_security_group" "public" {
  name = "public"
  description = "PublicSecurityGroup"
  vpc_id = aws_vpc.task-vpc.id
  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port = 22
    to_port = 22
    protocol = "tcp"
  }
   ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port = 80
    to_port = 80
    protocol = "tcp"
  }
  egress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port = 0
    to_port = 0
    protocol = "-1"
  }
  tags = {
    "Name" = "PublicSecurityGroup"
  }
}

#private security group
resource "aws_security_group" "private" {
  name = "private"
  vpc_id=aws_vpc.task-vpc.id

  #Incoming traffic
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    security_groups = [aws_security_group.public.id]
  }
  ingress {
    from_port = 3000
    to_port = 3000
    protocol = "tcp"
    security_groups = [aws_security_group.alb.id]
  }
  

  #Outgoing traffic
  egress {
    from_port = 0
    protocol = "-1"
    to_port = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
        Name = "PrivateSecurityGroup"
}
}


#alb security group
resource "aws_security_group" "alb" {
  name = "alb"
  vpc_id=aws_vpc.task-vpc.id

  #Incoming traffic
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  #Incoming traffic
  ingress {
    from_port = 443
    to_port = 443
    protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
  }

  #Outgoing traffic
  egress {
    from_port = 0
    protocol = "-1"
    to_port = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
        Name = "albSecurityGroup"
}
}

#pem file
resource "aws_key_pair" "pemkey" {
  key_name = "public key"

  public_key = file("/root/.ssh/id_rsa.pub")
}

#private instance
resource "aws_instance" "private-ec2" {
  ami = "ami-0eb8d082ba8eb9d04"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.private.id
  key_name = aws_key_pair.pemkey.key_name
  associate_public_ip_address = false
  vpc_security_group_ids = [aws_security_group.private.id]
  tags = {
  Name = "Private"
}
}


#public instance
resource "aws_instance" "public" {
  ami           = "ami-0eb8d082ba8eb9d04"
  subnet_id     = aws_subnet.public.id
  instance_type = "t2.micro"
  associate_public_ip_address = true
  key_name = aws_key_pair.pemkey.key_name
  vpc_security_group_ids = [aws_security_group.public.id]
  tags = {
        Name = "Public"
}

}


resource "aws_lb" "alb" {
  name               = "test-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.public.id, aws_subnet.public2.id]
  #security_groups    = [aws_security_group.alb.id]
  enable_deletion_protection = false  # Set to true if you want to enable deletion protection
}

resource "aws_lb_listener" "my_listener" {
  load_balancer_arn = aws_lb.alb.arn
  port              = 80
  protocol          = "HTTP"
  default_action {
    type             = "fixed-response"
    fixed_response {
      content_type   = "text/plain"
      status_code    = "200"
    #  content        = "OK"
    }
  }
}

#target group
resource "aws_lb_target_group" "test-tg" {
  name     = "test-target-group"
  port     = "3000"
  protocol = "HTTP"
  vpc_id   = aws_vpc.task-vpc.id
  target_type = "instance"

  health_check {
    path                = "/"
    port                = "3000"
    protocol            = "HTTP"
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    interval            = 30
  }
}

# Associate the target group with the ALB listener
resource "aws_lb_target_group_attachment" "test-tg-attachment" {
  target_group_arn = aws_lb_target_group.test-tg.arn
  target_id        = aws_instance.private-ec2.id  # Replace with your target ID (e.g., EC2 instance or IP)

}




resource "aws_lb_listener_rule" "my_listener_rule" {
  listener_arn = aws_lb_listener.my_listener.arn
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test-tg.arn  # Replace with your target group ARN
  
}
condition {
    host_header {
      values = ["example.com"]  # Replace with your desired hostname(s)
    }
  }
}

#+end_src
